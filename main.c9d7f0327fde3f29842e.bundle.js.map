{"version":3,"file":"main.c9d7f0327fde3f29842e.bundle.js","sources":["webpack:///./src/components/DynamicCell/index.js"],"sourcesContent":["// @flow\n\nimport React, { useState } from \"react\"\nimport Cell from \"../Cell\"\nimport { customStyles } from \"../SelectCell\"\nimport type { ColumnSchema } from \"../../types\"\nimport DropdownIcon from \"@material-ui/icons/ArrowDropDown\"\nimport { blue } from \"@material-ui/core/colors\"\nimport Select from \"react-select\"\nimport TypeIcon from \"../TypeIcon\"\n\nexport const defaultDynamicTypes = [\n  { value: { type: \"text\" }, label: \"Text\", example: \"\" },\n  { value: { type: \"text-array\" }, label: \"Text Array\", example: [\"\"] },\n  { value: { type: \"markdown\" }, label: \"Markdown\", example: \"#Markdown\" },\n  { value: { type: \"boolean\" }, label: \"Boolean\", example: false },\n  { value: { type: \"numeric\" }, label: \"Numeric\", example: 0 },\n  { value: { type: \"json\" }, label: \"JSON\", example: {} },\n  { value: { type: \"json-array\" }, label: \"JSON Array\", example: [{}] }\n]\n\nexport default (props: ColumnSchema) => {\n  const [typesOpen, changeTypesOpen] = useState(false)\n  const [currentType, changeCurrentType] = useState(() => {\n    if (props.value) {\n      if (typeof props.value === \"string\")\n        return props.value.trim().startsWith(\"#\") ? \"markdown\" : \"text\"\n      if (\n        Array.isArray(props.value) &&\n        props.length > 0 &&\n        typeof props.value[0] === \"object\"\n      )\n        return \"json-array\"\n      if (\n        Array.isArray(props.value) &&\n        props.length > 0 &&\n        typeof props.value[0] === \"string\"\n      )\n        return \"text-array\"\n      if (typeof props.value === \"object\") return \"json\"\n      if (typeof props.value === \"number\") return \"numeric\"\n      if (typeof props.value === \"boolean\") return \"boolean\"\n    }\n    return props.defaultType || \"text\"\n  })\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        position: \"relative\",\n        alignItems: \"center\",\n        flexGrow: 1,\n        paddingRight: 34,\n        overflow: \"hidden\",\n        width: props.width\n      }}\n    >\n      {typesOpen ? (\n        <div style={{ width: \"100%\" }}>\n          <Select\n            menuPortalTarget={document.body}\n            components={{ ClearIndicator: null }}\n            styles={customStyles}\n            autoFocus\n            onChange={v => {\n              if (v.value.type !== currentType) {\n                props.onChange(undefined)\n                changeCurrentType(v.value.type)\n              }\n              changeTypesOpen(false)\n            }}\n            defaultMenuIsOpen\n            value={defaultDynamicTypes.find(a => a.value.type === currentType)}\n            options={defaultDynamicTypes}\n          />\n        </div>\n      ) : (\n        <Cell {...props} type={currentType} />\n      )}\n      <div\n        onClick={() => {\n          changeTypesOpen(!typesOpen)\n        }}\n        style={{\n          position: \"absolute\",\n          top: 8,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          display: \"flex\",\n          right: 8,\n          backgroundColor: blue[300],\n          border: `2px solid ${blue[500]}`,\n          borderRadius: 3,\n          cursor: \"pointer\",\n          color: \"#fff\",\n          width: 18,\n          height: 18,\n          fontSize: 12,\n          fontWeight: \"bold\",\n          cursor: \"pointer\"\n        }}\n      >\n        {!typesOpen ? (\n          <TypeIcon\n            style={{ width: 14, height: 14, fontSize: 12, textAlign: \"center\" }}\n            type={currentType}\n          />\n        ) : (\n          \"V\"\n        )}\n      </div>\n    </div>\n  )\n}\n"],"mappings":"AAWA","sourceRoot":""}